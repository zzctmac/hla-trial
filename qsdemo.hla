program qsdemo;
#include("stdlib.hhf");
type
    ArrayType: uns32[10];

static  
    theArray: ArrayType := [1,10,2,9,3,8,4,7,5,6];

    procedure quicksort(var a:ArrayType; Low: int32; High: int32);
    const
        i:  text := "(type int32 edi)";
        j:  text := "(type int32 esi)";
        Middle: text := "(type uns32 edx)";
        ary:     text := "[ebx]";
    begin quicksort;

    push(eax);
    push(ebx);
    push(ecx);
    push(edx);
    push(esi);
    push(edi);

    mov(a, ebx); // Load Base address of "a" into ebx.
    mov(Low, edi); // i := Low
    mov(High, esi); // j := High

    mov(i, eax);
    add(j, eax);
    shr(1, eax);
    mov(ary[eax *4], Middle); // Put middle value in edx.

    repeat
        while(Middle > ary[i * 4]) do
            inc(i);
        endwhile;

        while(Middle < ary[j * 4]) do
            dec(j);
        endwhile;

        if(i <= j) then
            mov(ary[i * 4], eax);
            mov(ary[j * 4], ecx);
            mov(eax, ary[j *4]);
            mov(ecx, ary[i *4]);
            inc(i);
            dec(j);
        endif;

    until(i > j);

    if(Low < j) then
        quicksort(a, Low, j);
    endif;

    if(i < High) then
        quicksort(a, i, High);
    endif;


    pop(edi);
    pop(esi);
    pop(edx);
    pop(ecx);
    pop(ebx);
    pop(eax);

    end quicksort;

begin qsdemo;

stdout.put("Data before sorting: " nl);
for(mov(0, ebx); ebx < 10; inc(ebx)) do
    stdout.put(theArray[ebx *4]:5);
endfor;
stdout.newln();

quicksort(theArray, 0, 9);

stdout.put("Data after sorting: " nl);
for(mov(0, ebx); ebx < 10; inc(ebx)) do
    stdout.put(theArray[ebx *4]:5);
endfor;
stdout.newln();



end qsdemo;